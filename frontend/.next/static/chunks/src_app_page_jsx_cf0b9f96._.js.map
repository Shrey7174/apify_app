{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/shreyansh/Desktop/intern/apify-next-app/frontend/src/app/page.jsx"],"sourcesContent":["'use client';\n\nimport { useState, useRef } from 'react';\nimport axios from 'axios';\nimport dynamic from 'next/dynamic';\nimport { ClipLoader } from 'react-spinners';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst ActorList = dynamic(() => import('../components/ActorList'), { ssr: false });\nconst SchemaEditor = dynamic(() => import('../components/SchemaEditor'), { ssr: false });\nconst DocsModal = dynamic(() => import('../components/DocsModal'), { ssr: false });\n\nexport default function Home() {\n  const [apiKey, setApiKey] = useState('');\n  const [actors, setActors] = useState([]);\n  const [publicActors, setPublicActors] = useState([]);\n  const [schema, setSchema] = useState(null);\n  const [input, setInput] = useState('{}');\n  const [runResult, setRunResult] = useState(null);\n  const [actorId, setActorId] = useState('');\n  const [loading, setLoading] = useState(false);\n  const resultRef = useRef(null);\n\n  const backend = process.env.NEXT_PUBLIC_BACKEND_URL;\n\n  const notify = (msg, type = \"info\") => toast[type](msg, { autoClose: 3000 });\n\n  const scrollToResult = () => {\n    setTimeout(() => resultRef.current?.scrollIntoView({ behavior: \"smooth\" }), 200);\n  };\n\n  const fetchMyActors = async () => {\n    setLoading(true);\n    try {\n      const res = await axios.post(`${backend}/api/actors`, { apiKey });\n      setActors(res.data.data?.items || []);\n      notify('My Actors fetched', 'success');\n    } catch {\n      notify('Failed to fetch your actors', 'error');\n      setActors([]);\n    } finally { setLoading(false); }\n  };\n\n  const fetchPublicActors = async () => {\n    setLoading(true);\n    try {\n      const res = await axios.get(`${backend}/api/actors/public`);\n      setPublicActors(res.data.data?.items || []);\n      notify('Public Actors fetched', 'success');\n    } catch {\n      notify('Failed to fetch public actors', 'error');\n      setPublicActors([]);\n    } finally { setLoading(false); }\n  };\n\n  const fetchSchema = async id => {\n    setLoading(true);\n    try {\n      const res = await axios.post(`${backend}/api/schema`, { actorId: id, apiKey });\n      setSchema(res.data);\n      setActorId(id);\n      notify('Schema loaded', 'success');\n      const s = res.data.inputSchema || {};\n      const sample = Object.fromEntries(Object.keys(s).map(k => {\n        const t = s[k].type;\n        return [k, t === 'string' ? \"\" : t === 'boolean' ? false : t === 'array' ? [] : t === 'object' ? {} : null];\n      }));\n      setInput(Object.keys(sample).length ? JSON.stringify(sample, null, 2) : '{}');\n    } catch {\n      notify('Failed to load schema', 'error');\n      setSchema(null);\n    } finally { setLoading(false); }\n  };\n\n  const runActor = async () => {\n    setLoading(true);\n    try {\n      const parsed = JSON.parse(input);\n      const res = await axios.post(`${backend}/api/run`, { actorId, apiKey, input: parsed });\n      setRunResult(res.data);\n      notify('Actor run successful', 'success');\n      scrollToResult();\n    } catch {\n      notify('Failed to run actor', 'error');\n      setRunResult(null);\n    } finally { setLoading(false); }\n  };\n\n  return (\n    <div className=\"min-h-screen px-4 py-8 bg-darkBg text-lightText\">\n      <ToastContainer />\n      <div className=\"max-w-4xl mx-auto space-y-8\">\n        <div className=\"flex justify-between items-center\">\n          <h1 className=\"text-3xl md:text-4xl font-bold\" style={{ color: '#58a6ff' }}>\n            🔌 Apify Integration Dashboard\n          </h1>\n          <DocsModal />\n        </div>\n\n        <div className=\"flex flex-col sm:flex-row sm:items-center gap-4\">\n          <input\n            type=\"text\"\n            placeholder=\"Apify API Key\"\n            value={apiKey}\n            onChange={e => setApiKey(e.target.value)}\n            className=\"flex-1 px-4 py-2 bg-darkSurface border border-gray-600 rounded text-lightText focus:ring-2 focus:ring-accentBlue placeholder-gray-400\"\n          />\n          <div className=\"flex flex-col gap-2 sm:flex-row sm:gap-2 sm:mt-0 mt-2\">\n            <button\n              onClick={fetchMyActors}\n              disabled={loading}\n              className=\"px-4 py-2 bg-accentGreen hover:bg-green-600 text-white rounded shadow transition hover:scale-105\"\n            >\n              My Actors\n            </button>\n            <button\n              onClick={fetchPublicActors}\n              disabled={loading}\n              className=\"px-4 py-2 bg-accentBlue hover:bg-blue-500 text-white rounded shadow transition hover:scale-105\"\n            >\n              Public Actors\n            </button>\n          </div>\n        </div>\n\n        {loading && <div className=\"text-center\"><ClipLoader color=\"#58a6ff\" /></div>}\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <ActorList title=\"🎭 My Actors\" actors={actors} fetchSchema={fetchSchema} />\n          <ActorList title=\"🌐 Public Actors\" actors={publicActors} fetchSchema={fetchSchema} />\n        </div>\n\n        {schema && (\n          <SchemaEditor\n            actorId={actorId}\n            input={input}\n            setInput={setInput}\n            loading={loading}\n            runActor={runActor}\n          />\n        )}\n\n        {runResult && (\n          <div ref={resultRef} className=\"bg-darkSurface border border-green-700 p-6 rounded space-y-4\">\n            <h2 className=\"text-lg font-semibold text-green-400\">Run Result</h2>\n            <div className=\"max-h-[400px] overflow-auto bg-darkBg p-3 rounded\">\n              <JSONViewer src={runResult} collapsed={1} theme=\"monokai\" enableClipboard={false} />\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}